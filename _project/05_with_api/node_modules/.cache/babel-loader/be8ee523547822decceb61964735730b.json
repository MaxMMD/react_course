{"ast":null,"code":"var _jsxFileName = \"/Users/oscar/code/lewagon/react_course/_project/05_with_api/src/components/views/TasksView.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport View from '../ui/View';\nimport Title from '../ui/Title';\nimport colors from '../../utils/colors';\nimport Card from '../ui/Card';\nimport Icon from '../ui/Icon';\nimport CircleButton from '../ui/CircleButton';\nimport TaskContainer from '../containers/TaskContainer';\nimport Header from '../ui/Header';\nimport '../../style/TasksView.scss';\nimport { setSelectedList as setSelectedListAction, toggleListTask as toggleListTaskAction } from '../../action-creators/app';\n\nfunction TasksView(props) {\n  const {\n    list,\n    toggleListTask,\n    setSelectedList,\n    history\n  } = props;\n\n  const goBack = () => {\n    setSelectedList(null);\n    history.push('/');\n  };\n\n  return React.createElement(View, {\n    margin: 0,\n    background: list.color,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"TasksView\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"TasksView-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Header, {\n    left: React.createElement(Icon, {\n      name: \"arrow_back\",\n      style: {\n        color: colors.white\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }),\n    right: React.createElement(Icon, {\n      name: \"more_vert\",\n      style: {\n        color: colors.white\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }),\n    onLeft: goBack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(CircleButton, {\n    color: colors.white,\n    flat: true,\n    size: 40,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: list.icon,\n    style: {\n      color: list.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"TasksView-header-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Title, {\n    color: colors.white,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, list.title), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, list.tasks.length, ' ', \"tasks\"))), React.createElement(Card, {\n    radius: 20,\n    padding: 30,\n    style: {\n      flexBasis: '75vh',\n      overflow: 'hidden'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(TaskContainer, {\n    handleTaskChange: toggleListTask,\n    color: list.color,\n    tasks: list.tasks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(CircleButton, {\n    onClick: () => history.push('/new'),\n    color: list.color,\n    style: {\n      position: 'absolute',\n      bottom: 30,\n      right: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"add\",\n    style: {\n      color: colors.white\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))));\n}\n\nTasksView.propTypes = {\n  list: PropTypes.object.isRequired,\n  toggleListTask: PropTypes.func.isRequired,\n  setSelectedList: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedList: payload => dispatch(setSelectedListAction(payload)),\n  toggleListTask: payload => dispatch(toggleListTaskAction(payload))\n});\n\nexport default connect(null, mapDispatchToProps)(withRouter(TasksView));","map":{"version":3,"sources":["/Users/oscar/code/lewagon/react_course/_project/05_with_api/src/components/views/TasksView.js"],"names":["React","PropTypes","connect","withRouter","View","Title","colors","Card","Icon","CircleButton","TaskContainer","Header","setSelectedList","setSelectedListAction","toggleListTask","toggleListTaskAction","TasksView","props","list","history","goBack","push","color","white","icon","title","tasks","length","flexBasis","overflow","position","bottom","right","propTypes","object","isRequired","func","mapDispatchToProps","dispatch","payload"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,UADF,QAEO,kBAFP;AAGA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,4BAAP;AACA,SACEC,eAAe,IAAIC,qBADrB,EAEEC,cAAc,IAAIC,oBAFpB,QAGO,2BAHP;;AAKA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM;AACJC,IAAAA,IADI;AACEJ,IAAAA,cADF;AACkBF,IAAAA,eADlB;AACmCO,IAAAA;AADnC,MAEFF,KAFJ;;AAIA,QAAMG,MAAM,GAAG,MAAM;AACnBR,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAO,IAAAA,OAAO,CAACE,IAAR,CAAa,GAAb;AACD,GAHD;;AAKA,SACE,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAE,CAAd;AAAiB,IAAA,UAAU,EAAEH,IAAI,CAACI,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,IAAI,EACF,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,YAAX;AAAwB,MAAA,KAAK,EAAE;AAAEA,QAAAA,KAAK,EAAEhB,MAAM,CAACiB;AAAhB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIE,IAAA,KAAK,EACH,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,WAAX;AAAuB,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,EAAEhB,MAAM,CAACiB;AAAhB,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ;AAOE,IAAA,MAAM,EAAEH,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEd,MAAM,CAACiB,KAA5B;AAAmC,IAAA,IAAI,MAAvC;AAAwC,IAAA,IAAI,EAAE,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEL,IAAI,CAACM,IAAjB;AAAuB,IAAA,KAAK,EAAE;AAAEF,MAAAA,KAAK,EAAEJ,IAAI,CAACI;AAAd,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,EAaE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEhB,MAAM,CAACiB,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BL,IAAI,CAACO,KAAlC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,IAAI,CAACQ,KAAL,CAAWC,MADd,EAEG,GAFH,UAFF,CAbF,CADF,EAuBE,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAE,EAAd;AAAkB,IAAA,OAAO,EAAE,EAA3B;AAA+B,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,MAAb;AAAqBC,MAAAA,QAAQ,EAAE;AAA/B,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,gBAAgB,EAAEf,cAAjC;AAAiD,IAAA,KAAK,EAAEI,IAAI,CAACI,KAA7D;AAAoE,IAAA,KAAK,EAAEJ,IAAI,CAACQ,KAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAvBF,EA0BE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAE,MAAMP,OAAO,CAACE,IAAR,CAAa,MAAb,CADjB;AAEE,IAAA,KAAK,EAAEH,IAAI,CAACI,KAFd;AAGE,IAAA,KAAK,EAAE;AACLQ,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,MAAM,EAAE,EAFH;AAGLC,MAAAA,KAAK,EAAE;AAHF,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,KAAX;AAAiB,IAAA,KAAK,EAAE;AAAEV,MAAAA,KAAK,EAAEhB,MAAM,CAACiB;AAAhB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CA1BF,CADF,CADF;AA0CD;;AAGDP,SAAS,CAACiB,SAAV,GAAsB;AACpBf,EAAAA,IAAI,EAAEjB,SAAS,CAACiC,MAAV,CAAiBC,UADH;AAEpBrB,EAAAA,cAAc,EAAEb,SAAS,CAACmC,IAAV,CAAeD,UAFX;AAGpBvB,EAAAA,eAAe,EAAEX,SAAS,CAACmC,IAAV,CAAeD;AAHZ,CAAtB;;AAOA,MAAME,kBAAkB,GAAIC,QAAD,KAAe;AACxC1B,EAAAA,eAAe,EAAG2B,OAAD,IAAaD,QAAQ,CAACzB,qBAAqB,CAAC0B,OAAD,CAAtB,CADE;AAExCzB,EAAAA,cAAc,EAAGyB,OAAD,IAAaD,QAAQ,CAACvB,oBAAoB,CAACwB,OAAD,CAArB;AAFG,CAAf,CAA3B;;AAKA,eAAerC,OAAO,CAAC,IAAD,EAAOmC,kBAAP,CAAP,CAAkClC,UAAU,CAACa,SAAD,CAA5C,CAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  withRouter,\n} from 'react-router-dom'\nimport View from '../ui/View'\nimport Title from '../ui/Title'\nimport colors from '../../utils/colors'\nimport Card from '../ui/Card'\nimport Icon from '../ui/Icon'\nimport CircleButton from '../ui/CircleButton'\nimport TaskContainer from '../containers/TaskContainer'\nimport Header from '../ui/Header'\nimport '../../style/TasksView.scss'\nimport {\n  setSelectedList as setSelectedListAction,\n  toggleListTask as toggleListTaskAction,\n} from '../../action-creators/app'\n\nfunction TasksView(props) {\n  const {\n    list, toggleListTask, setSelectedList, history,\n  } = props\n\n  const goBack = () => {\n    setSelectedList(null)\n    history.push('/')\n  }\n\n  return (\n    <View margin={0} background={list.color}>\n      <div className=\"TasksView\">\n        <div className=\"TasksView-header\">\n          <Header\n            left={\n              <Icon name=\"arrow_back\" style={{ color: colors.white }} />\n            }\n            right={\n              <Icon name=\"more_vert\" style={{ color: colors.white }} />\n            }\n            onLeft={goBack}\n          />\n          <CircleButton color={colors.white} flat size={40}>\n            <Icon name={list.icon} style={{ color: list.color }} />\n          </CircleButton>\n          <div className=\"TasksView-header-text\">\n            <Title color={colors.white}>{list.title}</Title>\n            <p>\n              {list.tasks.length}\n              {' '}\n              tasks\n            </p>\n          </div>\n        </div>\n        <Card radius={20} padding={30} style={{ flexBasis: '75vh', overflow: 'hidden' }}>\n          <TaskContainer handleTaskChange={toggleListTask} color={list.color} tasks={list.tasks} />\n        </Card>\n        <CircleButton\n          onClick={() => history.push('/new')}\n          color={list.color}\n          style={{\n            position: 'absolute',\n            bottom: 30,\n            right: 30,\n          }}\n        >\n          <Icon name=\"add\" style={{ color: colors.white }} />\n        </CircleButton>\n      </div>\n    </View>\n  )\n}\n\n\nTasksView.propTypes = {\n  list: PropTypes.object.isRequired,\n  toggleListTask: PropTypes.func.isRequired,\n  setSelectedList: PropTypes.func.isRequired,\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  setSelectedList: (payload) => dispatch(setSelectedListAction(payload)),\n  toggleListTask: (payload) => dispatch(toggleListTaskAction(payload)),\n})\n\nexport default connect(null, mapDispatchToProps)(withRouter(TasksView))\n"]},"metadata":{},"sourceType":"module"}