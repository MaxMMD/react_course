{"ast":null,"code":"import initialLists from '../data/tasks.json';\nimport { SET_LIST_TASK, SET_SELECTED_LIST, TOGGLE_LIST_TASK, SET_LISTS } from '../actions/app';\nconst initialState = {\n  lists: initialLists,\n  selected: null\n};\n\nfunction app(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_LISTS:\n      return { ...state,\n        lists: payload\n      };\n\n    case SET_LIST_TASK:\n      {\n        const {\n          selected,\n          lists\n        } = state;\n        const selectedList = lists.find(list => list.id === selected);\n        selectedList.tasks.push({ ...payload,\n          done: false\n        });\n        return { ...state,\n          lists\n        };\n      }\n\n    case SET_SELECTED_LIST:\n      return { ...state,\n        selected: payload\n      };\n\n    case TOGGLE_LIST_TASK:\n      {\n        const {\n          selected\n        } = state;\n        const newLists = [...state.lists];\n        const list = newLists.find(lst => lst.id === selected);\n        const newList = { ...list\n        };\n        const tasks = newList.tasks.map(task => {\n          let isDone = task.done;\n          if (task.title === payload.title) isDone = !task.done;\n          return { ...task,\n            done: isDone\n          };\n        });\n        newList.tasks = tasks;\n        const filteredLists = newLists.filter(lst => !(lst.id === selected));\n        return { ...state,\n          lists: [...filteredLists, newList]\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default app;","map":{"version":3,"sources":["/Users/oscar/code/lewagon/react_course/_project/05_with_api/src/reducers/app.js"],"names":["initialLists","SET_LIST_TASK","SET_SELECTED_LIST","TOGGLE_LIST_TASK","SET_LISTS","initialState","lists","selected","app","state","action","type","payload","selectedList","find","list","id","tasks","push","done","newLists","lst","newList","map","task","isDone","title","filteredLists","filter"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,oBAAzB;AACA,SACEC,aADF,EAEEC,iBAFF,EAGEC,gBAHF,EAIEC,SAJF,QAKO,gBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEN,YADY;AAEnBO,EAAAA,QAAQ,EAAE;AAFS,CAArB;;AAKA,SAASC,GAAT,CAAaC,KAAK,GAAGJ,YAArB,EAAmCK,MAAnC,EAA2C;AACzC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKP,SAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYH,QAAAA,KAAK,EAAEM;AAAnB,OAAP;;AACF,SAAKX,aAAL;AAAoB;AAClB,cAAM;AAAEM,UAAAA,QAAF;AAAYD,UAAAA;AAAZ,YAAsBG,KAA5B;AACA,cAAMI,YAAY,GAAGP,KAAK,CAACQ,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYT,QAAjC,CAArB;AACAM,QAAAA,YAAY,CAACI,KAAb,CAAmBC,IAAnB,CAAwB,EACtB,GAAGN,OADmB;AAEtBO,UAAAA,IAAI,EAAE;AAFgB,SAAxB;AAIA,eAAO,EACL,GAAGV,KADE;AAELH,UAAAA;AAFK,SAAP;AAID;;AACD,SAAKJ,iBAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYF,QAAAA,QAAQ,EAAEK;AAAtB,OAAP;;AACF,SAAKT,gBAAL;AAAuB;AACrB,cAAM;AAAEI,UAAAA;AAAF,YAAeE,KAArB;AACA,cAAMW,QAAQ,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAjB;AACA,cAAMS,IAAI,GAAGK,QAAQ,CAACN,IAAT,CAAeO,GAAD,IAASA,GAAG,CAACL,EAAJ,KAAWT,QAAlC,CAAb;AACA,cAAMe,OAAO,GAAG,EAAE,GAAGP;AAAL,SAAhB;AACA,cAAME,KAAK,GAAGK,OAAO,CAACL,KAAR,CAAcM,GAAd,CAAmBC,IAAD,IAAU;AACxC,cAAIC,MAAM,GAAGD,IAAI,CAACL,IAAlB;AACA,cAAIK,IAAI,CAACE,KAAL,KAAed,OAAO,CAACc,KAA3B,EAAkCD,MAAM,GAAG,CAACD,IAAI,CAACL,IAAf;AAClC,iBAAO,EAAE,GAAGK,IAAL;AAAWL,YAAAA,IAAI,EAAEM;AAAjB,WAAP;AACD,SAJa,CAAd;AAKAH,QAAAA,OAAO,CAACL,KAAR,GAAgBA,KAAhB;AACA,cAAMU,aAAa,GAAGP,QAAQ,CAACQ,MAAT,CAAiBP,GAAD,IAAS,EAAEA,GAAG,CAACL,EAAJ,KAAWT,QAAb,CAAzB,CAAtB;AACA,eAAO,EACL,GAAGE,KADE;AAELH,UAAAA,KAAK,EAAE,CAAC,GAAGqB,aAAJ,EAAmBL,OAAnB;AAFF,SAAP;AAID;;AACD;AAAS,aAAOb,KAAP;AAlCX;AAoCD;;AAED,eAAeD,GAAf","sourcesContent":["import initialLists from '../data/tasks.json'\nimport {\n  SET_LIST_TASK,\n  SET_SELECTED_LIST,\n  TOGGLE_LIST_TASK,\n  SET_LISTS,\n} from '../actions/app'\n\nconst initialState = {\n  lists: initialLists,\n  selected: null,\n}\n\nfunction app(state = initialState, action) {\n  const { type, payload } = action\n  switch (type) {\n    case SET_LISTS:\n      return { ...state, lists: payload }\n    case SET_LIST_TASK: {\n      const { selected, lists } = state\n      const selectedList = lists.find((list) => list.id === selected)\n      selectedList.tasks.push({\n        ...payload,\n        done: false,\n      })\n      return {\n        ...state,\n        lists,\n      }\n    }\n    case SET_SELECTED_LIST:\n      return { ...state, selected: payload }\n    case TOGGLE_LIST_TASK: {\n      const { selected } = state\n      const newLists = [...state.lists]\n      const list = newLists.find((lst) => lst.id === selected)\n      const newList = { ...list }\n      const tasks = newList.tasks.map((task) => {\n        let isDone = task.done\n        if (task.title === payload.title) isDone = !task.done\n        return { ...task, done: isDone }\n      })\n      newList.tasks = tasks\n      const filteredLists = newLists.filter((lst) => !(lst.id === selected))\n      return {\n        ...state,\n        lists: [...filteredLists, newList],\n      }\n    }\n    default: return state\n  }\n}\n\nexport default app\n"]},"metadata":{},"sourceType":"module"}