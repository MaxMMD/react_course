{"ast":null,"code":"import { SET_LIST_TASK, SET_SELECTED_LIST, UPDATE_LIST_TASK, SET_LISTS } from '../actions/app';\nconst initialState = {\n  lists: [],\n  selected: null\n};\n\nfunction app(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_LISTS:\n      return { ...state,\n        lists: payload\n      };\n\n    case SET_LIST_TASK:\n      {\n        const {\n          selected\n        } = state;\n        const newLists = [...state.lists];\n        const selectedList = newLists.find(list => list.id === selected);\n        const newList = { ...selectedList\n        };\n        newList.tasks.push(payload);\n        return { ...state,\n          lists: newLists\n        };\n      }\n\n    case UPDATE_LIST_TASK:\n      {\n        const {\n          selected\n        } = state;\n        const newLists = [...state.lists];\n        const selectedList = newLists.find(list => list.id === selected);\n        const newList = { ...selectedList\n        };\n        const newTasks = [...newList.tasks].filter(tsk => !(tsk.id === payload.id));\n        newList.tasks = [...newTasks, payload];\n        return { ...state,\n          lists: newLists\n        };\n      }\n\n    case SET_SELECTED_LIST:\n      return { ...state,\n        selected: payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default app;","map":{"version":3,"sources":["/Users/oscar/code/lewagon/react_course/_project/05_with_api/src/reducers/app.js"],"names":["SET_LIST_TASK","SET_SELECTED_LIST","UPDATE_LIST_TASK","SET_LISTS","initialState","lists","selected","app","state","action","type","payload","newLists","selectedList","find","list","id","newList","tasks","push","newTasks","filter","tsk"],"mappings":"AAAA,SACEA,aADF,EAEEC,iBAFF,EAGEC,gBAHF,EAIEC,SAJF,QAKO,gBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;;AAKA,SAASC,GAAT,CAAaC,KAAK,GAAGJ,YAArB,EAAmCK,MAAnC,EAA2C;AACzC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKP,SAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYH,QAAAA,KAAK,EAAEM;AAAnB,OAAP;;AACF,SAAKX,aAAL;AAAoB;AAClB,cAAM;AAAEM,UAAAA;AAAF,YAAeE,KAArB;AACA,cAAMI,QAAQ,GAAG,CAAC,GAAGJ,KAAK,CAACH,KAAV,CAAjB;AACA,cAAMQ,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYV,QAApC,CAArB;AACA,cAAMW,OAAO,GAAG,EAAE,GAAGJ;AAAL,SAAhB;AACAI,QAAAA,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBR,OAAnB;AACA,eAAO,EACL,GAAGH,KADE;AAELH,UAAAA,KAAK,EAAEO;AAFF,SAAP;AAID;;AACD,SAAKV,gBAAL;AAAuB;AACrB,cAAM;AAAEI,UAAAA;AAAF,YAAeE,KAArB;AACA,cAAMI,QAAQ,GAAG,CAAC,GAAGJ,KAAK,CAACH,KAAV,CAAjB;AACA,cAAMQ,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYV,QAApC,CAArB;AACA,cAAMW,OAAO,GAAG,EAAE,GAAGJ;AAAL,SAAhB;AACA,cAAMO,QAAQ,GAAG,CAAC,GAAGH,OAAO,CAACC,KAAZ,EAAmBG,MAAnB,CAA0BC,GAAG,IAAI,EAAEA,GAAG,CAACN,EAAJ,KAAWL,OAAO,CAACK,EAArB,CAAjC,CAAjB;AACAC,QAAAA,OAAO,CAACC,KAAR,GAAgB,CAAC,GAAGE,QAAJ,EAAcT,OAAd,CAAhB;AACA,eAAO,EACL,GAAGH,KADE;AAELH,UAAAA,KAAK,EAAEO;AAFF,SAAP;AAID;;AACD,SAAKX,iBAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYF,QAAAA,QAAQ,EAAEK;AAAtB,OAAP;;AACF;AAAS,aAAOH,KAAP;AA5BX;AA8BD;;AAED,eAAeD,GAAf","sourcesContent":["import {\n  SET_LIST_TASK,\n  SET_SELECTED_LIST,\n  UPDATE_LIST_TASK,\n  SET_LISTS,\n} from '../actions/app'\n\nconst initialState = {\n  lists: [],\n  selected: null,\n}\n\nfunction app(state = initialState, action) {\n  const { type, payload } = action\n  switch (type) {\n    case SET_LISTS:\n      return { ...state, lists: payload }\n    case SET_LIST_TASK: {\n      const { selected } = state\n      const newLists = [...state.lists]\n      const selectedList = newLists.find((list) => list.id === selected)\n      const newList = { ...selectedList }\n      newList.tasks.push(payload)\n      return {\n        ...state,\n        lists: newLists,\n      }\n    }\n    case UPDATE_LIST_TASK: {\n      const { selected } = state\n      const newLists = [...state.lists]\n      const selectedList = newLists.find((list) => list.id === selected)\n      const newList = { ...selectedList }\n      const newTasks = [...newList.tasks].filter(tsk => !(tsk.id === payload.id))\n      newList.tasks = [...newTasks, payload]\n      return {\n        ...state,\n        lists: newLists\n      }\n    }\n    case SET_SELECTED_LIST:\n      return { ...state, selected: payload }\n    default: return state\n  }\n}\n\nexport default app\n"]},"metadata":{},"sourceType":"module"}